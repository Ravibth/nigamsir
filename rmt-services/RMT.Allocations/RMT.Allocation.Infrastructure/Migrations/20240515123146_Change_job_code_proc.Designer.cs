// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RMT.Allocation.Infrastructure.Data;

#nullable disable

namespace RMT.Allocation.Infrastructure.Migrations
{
    [DbContext(typeof(AllocationDbContext))]
    [Migration("20240515123146_Change_job_code_proc")]
    partial class Change_job_code_proc
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.AllocationDayGroup", b =>
                {
                    b.Property<DateTime?>("monthname")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("cost")
                        .HasColumnType("double precision");

                    b.Property<string>("designation")
                        .HasColumnType("text");

                    b.Property<double?>("totaltime")
                        .HasColumnType("double precision");

                    b.HasKey("monthname");

                    b.ToTable((string)null);

                    b.ToView("sp_allocationday_view", (string)null);
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.AllocationDayResourceGroup", b =>
                {
                    b.Property<string>("empemail")
                        .HasColumnType("text");

                    b.Property<double?>("cost")
                        .HasColumnType("double precision");

                    b.Property<string>("empname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("totaltime")
                        .HasColumnType("double precision");

                    b.HasKey("empemail");

                    b.ToTable((string)null);

                    b.ToView("sp_allocationday_resource_view", (string)null);
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.PublishedResAlloc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<long>("Efforts")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsPerDayAllocation")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PublishedResAllocDetailsId")
                        .HasColumnType("uuid");

                    b.Property<double>("RatePerHour")
                        .HasColumnType("double precision");

                    b.Property<Guid>("RequisitionId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<long>("TotalWorkingDays")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PublishedResAllocDetailsId");

                    b.HasIndex("RequisitionId");

                    b.ToTable("PublishedResAlloc");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.PublishedResAllocDays", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("AllocationDate")
                        .HasColumnType("date");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<long>("Efforts")
                        .HasColumnType("bigint");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JobCode")
                        .HasColumnType("text");

                    b.Property<string>("PipelineCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PublishedResAllocId")
                        .HasColumnType("uuid");

                    b.Property<double>("RatePerHour")
                        .HasColumnType("double precision");

                    b.Property<Guid>("RequisitionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PublishedResAllocId");

                    b.HasIndex("RequisitionId");

                    b.ToTable("PublishedResAllocDays");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.PublishedResAllocDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AllocationStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("AllocationVersion")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ConfirmedAllocationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmpEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmpName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RequisitionId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<long>("TotalEffort")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RequisitionId");

                    b.ToTable("PublishedResAllocDetails");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.PublishedResAllocSkillEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PublishedResAllocDetailsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequisitionId")
                        .HasColumnType("uuid");

                    b.Property<string>("SkillCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PublishedResAllocDetailsId");

                    b.HasIndex("RequisitionId");

                    b.ToTable("PublishedResAllocSkillEntity");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.Requisition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BusinessUnit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("EffortsPerDay")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Expertise")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPerDayHourAllocation")
                        .HasColumnType("boolean");

                    b.Property<string>("JobCode")
                        .HasColumnType("text");

                    b.Property<string>("JobName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PipelineCode")
                        .HasColumnType("text");

                    b.Property<string>("PipelineName")
                        .HasColumnType("text");

                    b.Property<Guid>("RequisitionDemand")
                        .HasColumnType("uuid");

                    b.Property<string>("RequisitionStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RequisitionTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("SMEG")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<long>("TotalHours")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RequisitionDemand");

                    b.HasIndex("RequisitionTypeId");

                    b.ToTable("Requisition");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.RequisitionDemand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllResourcesHaveSameDetails")
                        .HasColumnType("boolean");

                    b.Property<long>("PendingDemands")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalDemands")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("RequisitionDemand");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.RequisitionParameterValues", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RequisitionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RequisitionId");

                    b.ToTable("RequisitionParameterValues");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.RequisitionParameters", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RequisitionId")
                        .HasColumnType("uuid");

                    b.Property<long>("RequisitionWeight")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RequisitionId");

                    b.ToTable("RequisitionParameters");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.RequisitionSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequisitionId")
                        .HasColumnType("uuid");

                    b.Property<string>("SkillCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RequisitionId");

                    b.ToTable("RequisitionSkill");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.RequisitionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RequisitionType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Type = "Named Allocation"
                        },
                        new
                        {
                            Id = 2L,
                            Type = "Same Team Allocation"
                        },
                        new
                        {
                            Id = 3L,
                            Type = "Create Requisition"
                        },
                        new
                        {
                            Id = 4L,
                            Type = "Roll Forward Allocation"
                        },
                        new
                        {
                            Id = 5L,
                            Type = "Bulk Allocation"
                        },
                        new
                        {
                            Id = 6L,
                            Type = "Bulk Requisition"
                        });
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.ResourceAllocationDesignation", b =>
                {
                    b.Property<string>("designation")
                        .HasColumnType("text");

                    b.Property<string>("PipelineCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("cost")
                        .HasColumnType("double precision");

                    b.Property<string>("jobcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("totaleffort")
                        .HasColumnType("double precision");

                    b.HasKey("designation");

                    b.ToTable((string)null);

                    b.ToView("sp_allocation_designation_view", (string)null);
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.UnPublishedResAlloc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<long>("Efforts")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsPerDayAllocation")
                        .HasColumnType("boolean");

                    b.Property<double>("RatePerHour")
                        .HasColumnType("double precision");

                    b.Property<Guid>("RequisitionId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<long>("TotalWorkingDays")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UnPublishedResAllocDetailsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RequisitionId");

                    b.HasIndex("UnPublishedResAllocDetailsId");

                    b.ToTable("UnPublishedResAlloc");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.UnPublishedResAllocDays", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("AllocationDate")
                        .HasColumnType("date");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<long>("Efforts")
                        .HasColumnType("bigint");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JobCode")
                        .HasColumnType("text");

                    b.Property<string>("PipelineCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("RatePerHour")
                        .HasColumnType("double precision");

                    b.Property<Guid>("RequisitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnPublishedResAllocId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RequisitionId");

                    b.HasIndex("UnPublishedResAllocId");

                    b.ToTable("UnPublishedResAllocDays");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.UnPublishedResAllocDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AllocationStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("AllocationVersion")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmpEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmpName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentPublishedResAllocDetailsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequisitionId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<long>("TotalEffort")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentPublishedResAllocDetailsId");

                    b.HasIndex("RequisitionId");

                    b.ToTable("UnPublishedResAllocDetails");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.UnPublishedResAllocSkillEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequisitionId")
                        .HasColumnType("uuid");

                    b.Property<string>("SkillCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UnPublishedResAllocDetailsId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UnPublishedResAllocSkillEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RequisitionId");

                    b.HasIndex("UnPublishedResAllocDetailsId");

                    b.HasIndex("UnPublishedResAllocSkillEntityId");

                    b.ToTable("UnPublishedResAllocSkillEntity");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.UpdateDesignationCost", b =>
                {
                    b.Property<string>("EmpEmail")
                        .HasColumnType("text");

                    b.Property<double>("cost")
                        .HasColumnType("double precision");

                    b.HasKey("EmpEmail");

                    b.ToTable((string)null);

                    b.ToView("sp_update_designation", (string)null);
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.resourceallocationrequistionview", b =>
                {
                    b.Property<long>("RequisitionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("AllocationEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("AllocationStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AllocationStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmpEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmpName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("JobCode")
                        .HasColumnType("text");

                    b.Property<string>("JobName")
                        .HasColumnType("text");

                    b.Property<string>("PipelineCode")
                        .HasColumnType("text");

                    b.Property<string>("PipelineName")
                        .HasColumnType("text");

                    b.Property<string>("RecordType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("SuspendedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TotalEffort")
                        .HasColumnType("integer");

                    b.Property<Guid>("guid")
                        .HasColumnType("uuid");

                    b.HasKey("RequisitionId");

                    b.ToTable((string)null);

                    b.ToView("resourceallocationrequistionview", (string)null);
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.PublishedResAlloc", b =>
                {
                    b.HasOne("RMT.Allocation.Domain.Entities.PublishedResAllocDetails", "ResourceAllocationsDetails")
                        .WithMany("ResourceAllocations")
                        .HasForeignKey("PublishedResAllocDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMT.Allocation.Domain.Entities.Requisition", "Requisition")
                        .WithMany()
                        .HasForeignKey("RequisitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requisition");

                    b.Navigation("ResourceAllocationsDetails");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.PublishedResAllocDays", b =>
                {
                    b.HasOne("RMT.Allocation.Domain.Entities.PublishedResAlloc", "ResAlloc")
                        .WithMany("ResourceAllocationsDays")
                        .HasForeignKey("PublishedResAllocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMT.Allocation.Domain.Entities.Requisition", "Requisition")
                        .WithMany()
                        .HasForeignKey("RequisitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requisition");

                    b.Navigation("ResAlloc");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.PublishedResAllocDetails", b =>
                {
                    b.HasOne("RMT.Allocation.Domain.Entities.Requisition", "Requisition")
                        .WithMany()
                        .HasForeignKey("RequisitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requisition");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.PublishedResAllocSkillEntity", b =>
                {
                    b.HasOne("RMT.Allocation.Domain.Entities.PublishedResAllocDetails", "ResAllocDetails")
                        .WithMany("Skills")
                        .HasForeignKey("PublishedResAllocDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMT.Allocation.Domain.Entities.Requisition", "Requisition")
                        .WithMany()
                        .HasForeignKey("RequisitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requisition");

                    b.Navigation("ResAllocDetails");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.Requisition", b =>
                {
                    b.HasOne("RMT.Allocation.Domain.Entities.RequisitionDemand", "demands")
                        .WithMany("Requisitions")
                        .HasForeignKey("RequisitionDemand")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMT.Allocation.Domain.Entities.RequisitionType", "RequisitionType")
                        .WithMany()
                        .HasForeignKey("RequisitionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequisitionType");

                    b.Navigation("demands");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.RequisitionParameterValues", b =>
                {
                    b.HasOne("RMT.Allocation.Domain.Entities.Requisition", "Requisition")
                        .WithMany("RequisitionParameterValues")
                        .HasForeignKey("RequisitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requisition");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.RequisitionParameters", b =>
                {
                    b.HasOne("RMT.Allocation.Domain.Entities.Requisition", "Requisition")
                        .WithMany("RequisitionParameters")
                        .HasForeignKey("RequisitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requisition");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.RequisitionSkill", b =>
                {
                    b.HasOne("RMT.Allocation.Domain.Entities.Requisition", "Requisition")
                        .WithMany("RequisitionSkill")
                        .HasForeignKey("RequisitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requisition");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.UnPublishedResAlloc", b =>
                {
                    b.HasOne("RMT.Allocation.Domain.Entities.Requisition", "Requisition")
                        .WithMany()
                        .HasForeignKey("RequisitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMT.Allocation.Domain.Entities.UnPublishedResAllocDetails", "ResourceAllocationsDetails")
                        .WithMany("ResourceAllocations")
                        .HasForeignKey("UnPublishedResAllocDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requisition");

                    b.Navigation("ResourceAllocationsDetails");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.UnPublishedResAllocDays", b =>
                {
                    b.HasOne("RMT.Allocation.Domain.Entities.Requisition", "Requisition")
                        .WithMany()
                        .HasForeignKey("RequisitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMT.Allocation.Domain.Entities.UnPublishedResAlloc", "ResAlloc")
                        .WithMany("ResourceAllocationsDays")
                        .HasForeignKey("UnPublishedResAllocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requisition");

                    b.Navigation("ResAlloc");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.UnPublishedResAllocDetails", b =>
                {
                    b.HasOne("RMT.Allocation.Domain.Entities.PublishedResAllocDetails", "ParentResAllocDetail")
                        .WithMany()
                        .HasForeignKey("ParentPublishedResAllocDetailsId");

                    b.HasOne("RMT.Allocation.Domain.Entities.Requisition", "Requisition")
                        .WithMany()
                        .HasForeignKey("RequisitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentResAllocDetail");

                    b.Navigation("Requisition");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.UnPublishedResAllocSkillEntity", b =>
                {
                    b.HasOne("RMT.Allocation.Domain.Entities.Requisition", "Requisition")
                        .WithMany()
                        .HasForeignKey("RequisitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMT.Allocation.Domain.Entities.UnPublishedResAllocDetails", "ResAllocDetails")
                        .WithMany("Skills")
                        .HasForeignKey("UnPublishedResAllocDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMT.Allocation.Domain.Entities.UnPublishedResAllocSkillEntity", null)
                        .WithMany("Skills")
                        .HasForeignKey("UnPublishedResAllocSkillEntityId");

                    b.Navigation("Requisition");

                    b.Navigation("ResAllocDetails");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.PublishedResAlloc", b =>
                {
                    b.Navigation("ResourceAllocationsDays");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.PublishedResAllocDetails", b =>
                {
                    b.Navigation("ResourceAllocations");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.Requisition", b =>
                {
                    b.Navigation("RequisitionParameterValues");

                    b.Navigation("RequisitionParameters");

                    b.Navigation("RequisitionSkill");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.RequisitionDemand", b =>
                {
                    b.Navigation("Requisitions");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.UnPublishedResAlloc", b =>
                {
                    b.Navigation("ResourceAllocationsDays");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.UnPublishedResAllocDetails", b =>
                {
                    b.Navigation("ResourceAllocations");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("RMT.Allocation.Domain.Entities.UnPublishedResAllocSkillEntity", b =>
                {
                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
