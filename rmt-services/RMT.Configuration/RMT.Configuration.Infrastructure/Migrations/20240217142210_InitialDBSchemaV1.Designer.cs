// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RMT.Configuration.Infrastructure.Data;

#nullable disable

namespace RMT.Configuration.Infrastructure.Migrations
{
    [DbContext(typeof(ConfigurationDbContext))]
    [Migration("20240217142210_InitialDBSchemaV1")]
    partial class InitialDBSchemaV1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RMT.Configuration.Domain.Entities.ApplicationLevelSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApplicationLevelSettings");
                });

            modelBuilder.Entity("RMT.Configuration.Domain.Entities.Bu_Experties_Grp", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BusinessUnitId")
                        .HasColumnType("bigint");

                    b.Property<string>("BusinessUnitName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ExpertiesId")
                        .HasColumnType("bigint");

                    b.Property<string>("ExpertiesName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("RUId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SMEGId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BusinessUnitId");

                    b.HasIndex("ExpertiesId");

                    b.HasIndex("RUId");

                    b.HasIndex("SMEGId");

                    b.ToTable("Bu_Experties_Grps");
                });

            modelBuilder.Entity("RMT.Configuration.Domain.Entities.BusinessUnitMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BuId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BusinessUnit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BusinessUnitMasters");
                });

            modelBuilder.Entity("RMT.Configuration.Domain.Entities.ConfigurationGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AllValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConfigGroup")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConfigGroupDisplay")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConfigKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConfigType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CongigDisplayText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAll")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ConfigurationGroups");
                });

            modelBuilder.Entity("RMT.Configuration.Domain.Entities.ContextMenuMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InternalName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ContextMenuMaster");
                });

            modelBuilder.Entity("RMT.Configuration.Domain.Entities.ExpertiesMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Experties")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExpertiesId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ExpertiesMasters");
                });

            modelBuilder.Entity("RMT.Configuration.Domain.Entities.MenuMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InternalName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDisplay")
                        .HasColumnType("boolean");

                    b.Property<bool>("Is_Expandable")
                        .HasColumnType("boolean");

                    b.Property<string>("MenuType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MenuMaster");
                });

            modelBuilder.Entity("RMT.Configuration.Domain.Entities.ProjectConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AttributeValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ConfigId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConfigId");

                    b.ToTable("ProjectConfigurations");
                });

            modelBuilder.Entity("RMT.Configuration.Domain.Entities.RUMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RU")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RUId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RUMaster");
                });

            modelBuilder.Entity("RMT.Configuration.Domain.Entities.RoleContextMenu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ContextMenuId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContextMenuId");

                    b.ToTable("RoleContextMenu");
                });

            modelBuilder.Entity("RMT.Configuration.Domain.Entities.RoleMenu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<long>("MenuId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("RoleMenu");
                });

            modelBuilder.Entity("RMT.Configuration.Domain.Entities.SMEGMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SMEG")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SMEGId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SMEGMaster");
                });

            modelBuilder.Entity("RMT.Configuration.Domain.Entities.SchedularLogs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SchedularEndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("SchedularStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SchedularLog");
                });

            modelBuilder.Entity("RMT.Configuration.Domain.Entities.Bu_Experties_Grp", b =>
                {
                    b.HasOne("RMT.Configuration.Domain.Entities.BusinessUnitMaster", "BusinessUnitMaster")
                        .WithMany("Bu_Experties_Grps")
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMT.Configuration.Domain.Entities.ExpertiesMaster", "ExpertiesMaster")
                        .WithMany("Bu_Experties_Grps")
                        .HasForeignKey("ExpertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMT.Configuration.Domain.Entities.RUMaster", "RUMaster")
                        .WithMany("Bu_Experties_Grps")
                        .HasForeignKey("RUId");

                    b.HasOne("RMT.Configuration.Domain.Entities.SMEGMaster", "SMEGMaster")
                        .WithMany("Bu_Experties_Grps")
                        .HasForeignKey("SMEGId");

                    b.Navigation("BusinessUnitMaster");

                    b.Navigation("ExpertiesMaster");

                    b.Navigation("RUMaster");

                    b.Navigation("SMEGMaster");
                });

            modelBuilder.Entity("RMT.Configuration.Domain.Entities.ProjectConfiguration", b =>
                {
                    b.HasOne("RMT.Configuration.Domain.Entities.ConfigurationGroup", "ConfigurationGroup")
                        .WithMany("ProjectConfigurations")
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfigurationGroup");
                });

            modelBuilder.Entity("RMT.Configuration.Domain.Entities.RoleContextMenu", b =>
                {
                    b.HasOne("RMT.Configuration.Domain.Entities.ContextMenuMaster", "ContextMenu")
                        .WithMany("RoleContextMenus")
                        .HasForeignKey("ContextMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContextMenu");
                });

            modelBuilder.Entity("RMT.Configuration.Domain.Entities.RoleMenu", b =>
                {
                    b.HasOne("RMT.Configuration.Domain.Entities.MenuMaster", "Menu")
                        .WithMany("RoleMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("RMT.Configuration.Domain.Entities.BusinessUnitMaster", b =>
                {
                    b.Navigation("Bu_Experties_Grps");
                });

            modelBuilder.Entity("RMT.Configuration.Domain.Entities.ConfigurationGroup", b =>
                {
                    b.Navigation("ProjectConfigurations");
                });

            modelBuilder.Entity("RMT.Configuration.Domain.Entities.ContextMenuMaster", b =>
                {
                    b.Navigation("RoleContextMenus");
                });

            modelBuilder.Entity("RMT.Configuration.Domain.Entities.ExpertiesMaster", b =>
                {
                    b.Navigation("Bu_Experties_Grps");
                });

            modelBuilder.Entity("RMT.Configuration.Domain.Entities.MenuMaster", b =>
                {
                    b.Navigation("RoleMenus");
                });

            modelBuilder.Entity("RMT.Configuration.Domain.Entities.RUMaster", b =>
                {
                    b.Navigation("Bu_Experties_Grps");
                });

            modelBuilder.Entity("RMT.Configuration.Domain.Entities.SMEGMaster", b =>
                {
                    b.Navigation("Bu_Experties_Grps");
                });
#pragma warning restore 612, 618
        }
    }
}
