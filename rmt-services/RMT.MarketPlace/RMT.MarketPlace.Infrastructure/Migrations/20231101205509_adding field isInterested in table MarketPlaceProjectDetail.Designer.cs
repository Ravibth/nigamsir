// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RMT.MarketPlace.Infrastructure.Data;

#nullable disable

namespace RMT.MarketPlace.Infrastructure.Migrations
{
    [DbContext(typeof(MarketPlaceDbContext))]
    [Migration("20231101205509_adding field isInterested in table MarketPlaceProjectDetail")]
    partial class addingfieldisInterestedintableMarketPlaceProjectDetail
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RMT.MarketPlace.Domain.Entities.EmpProjectInterest", b =>
                {
                    b.Property<long?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("ID"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmpEmail")
                        .HasColumnType("text");

                    b.Property<long?>("EmpMID")
                        .HasColumnType("bigint");

                    b.Property<string>("EmpName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("InterestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsInterested")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PipelineCode")
                        .HasColumnType("text");

                    b.Property<string>("PipelineName")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("EmpProjectInterest");
                });

            modelBuilder.Entity("RMT.MarketPlace.Domain.Entities.MarketPlaceProjectDetail", b =>
                {
                    b.Property<long?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("ID"));

                    b.Property<string>("BusinessUnit")
                        .HasColumnType("text");

                    b.Property<string>("ChargableType")
                        .HasColumnType("text");

                    b.Property<string>("ClientName")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Csp")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ElForJob")
                        .HasColumnType("text");

                    b.Property<string>("ElForPipeLine")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Expertise")
                        .HasColumnType("text");

                    b.Property<string>("Industry")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsInterested")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPublishedToMarketPlace")
                        .HasColumnType("boolean");

                    b.Property<string>("JsonData")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<DateTime?>("MarketPlacePublishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PipelineCode")
                        .HasColumnType("text");

                    b.Property<string>("PipelineName")
                        .HasColumnType("text");

                    b.Property<string>("ProposedCsp")
                        .HasColumnType("text");

                    b.Property<string>("RevenueUnit")
                        .HasColumnType("text");

                    b.Property<string>("Smeg")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Subindustry")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("MarketPlaceProjectDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
