// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RMT.Notification.Infrastructure.Data;

#nullable disable

namespace RMT.Notification.Infrastructure.Migrations
{
    [DbContext(typeof(NotificationDbContext))]
    [Migration("20240527121210_notification-template-seeder-v1-Delete-olddata")]
    partial class notificationtemplateseederv1Deleteolddata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RMT.Notification.Domain.Entities.NotificationEntity", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("item_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<JsonDocument>("meta")
                        .HasColumnType("jsonb");

                    b.Property<string>("modifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("modifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("notification_template_id")
                        .HasColumnType("bigint");

                    b.Property<string>("to")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("notification_template_id");

                    b.ToTable("NotificationEntity");
                });

            modelBuilder.Entity("RMT.Notification.Domain.Entities.NotificationPlaceHolder", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<bool>("is_required")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("notification_template_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("notification_template_id");

                    b.ToTable("NotificationPlaceHolder");
                });

            modelBuilder.Entity("RMT.Notification.Domain.Entities.NotificationSubscription", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("createdBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("createdDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("modifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("modifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("module")
                        .HasColumnType("text");

                    b.Property<string>("subscription_role")
                        .HasColumnType("text");

                    b.Property<string>("user_emailid")
                        .HasColumnType("text");

                    b.Property<string>("user_name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("NotificationSubscription");
                });

            modelBuilder.Entity("RMT.Notification.Domain.Entities.NotificationTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("cc")
                        .HasColumnType("text");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<long?>("link_id")
                        .HasColumnType("bigint");

                    b.Property<string>("module")
                        .HasColumnType("text");

                    b.Property<string>("notification_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("sub_module")
                        .HasColumnType("text");

                    b.Property<string>("subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("subscription_role")
                        .HasColumnType("text");

                    b.Property<string>("template")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("to")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("link_id");

                    b.ToTable("NotificationTemplates");
                });

            modelBuilder.Entity("RMT.Notification.Domain.Entities.NotificationTemplateLinks", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubModule")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NotificationTemplateLinks");
                });

            modelBuilder.Entity("RMT.Notification.Domain.Entities.NotificationTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("RMT.Notification.Domain.Entities.UserNotification", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("employee_id")
                        .HasColumnType("text");

                    b.Property<bool>("isRead")
                        .HasColumnType("boolean");

                    b.Property<string>("modifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("modifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("notification_id")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("notification_id");

                    b.ToTable("UserNotification");
                });

            modelBuilder.Entity("RMT.Notification.Domain.Entities.NotificationEntity", b =>
                {
                    b.HasOne("RMT.Notification.Domain.Entities.NotificationTemplate", "notificationTemplateMaster")
                        .WithMany()
                        .HasForeignKey("notification_template_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("notificationTemplateMaster");
                });

            modelBuilder.Entity("RMT.Notification.Domain.Entities.NotificationPlaceHolder", b =>
                {
                    b.HasOne("RMT.Notification.Domain.Entities.NotificationTemplate", null)
                        .WithMany("payload")
                        .HasForeignKey("notification_template_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RMT.Notification.Domain.Entities.NotificationTemplate", b =>
                {
                    b.HasOne("RMT.Notification.Domain.Entities.NotificationTemplateLinks", "link")
                        .WithMany()
                        .HasForeignKey("link_id");

                    b.Navigation("link");
                });

            modelBuilder.Entity("RMT.Notification.Domain.Entities.UserNotification", b =>
                {
                    b.HasOne("RMT.Notification.Domain.Entities.NotificationEntity", "notification")
                        .WithMany()
                        .HasForeignKey("notification_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("notification");
                });

            modelBuilder.Entity("RMT.Notification.Domain.Entities.NotificationTemplate", b =>
                {
                    b.Navigation("payload");
                });
#pragma warning restore 612, 618
        }
    }
}
