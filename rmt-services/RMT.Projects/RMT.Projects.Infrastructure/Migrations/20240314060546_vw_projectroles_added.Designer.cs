// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RMT.Projects.Infrastructure.Data;

#nullable disable

namespace RMT.Projects.Infrastructure.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    [Migration("20240314060546_vw_projectroles_added")]
    partial class vw_projectroles_added
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RMT.Projects.Domain.Entities.FieldForMarketPlace", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InternalName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FieldForMarketPlaces");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 2, 22, 15, 19, 45, 866, DateTimeKind.Utc),
                            CreatedBy = "System",
                            DisplayName = "Name of Project",
                            InternalName = "projectName",
                            IsActive = true,
                            ModifiedAt = new DateTime(2024, 2, 22, 15, 19, 45, 866, DateTimeKind.Utc),
                            ModifiedBy = "System"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2024, 2, 22, 15, 19, 45, 866, DateTimeKind.Utc),
                            CreatedBy = "System",
                            DisplayName = "Client Name",
                            InternalName = "clientName",
                            IsActive = true,
                            ModifiedAt = new DateTime(2024, 2, 22, 15, 19, 45, 866, DateTimeKind.Utc),
                            ModifiedBy = "System"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2024, 2, 22, 15, 19, 45, 866, DateTimeKind.Utc),
                            CreatedBy = "System",
                            DisplayName = "Client Group",
                            InternalName = "clientGroup",
                            IsActive = true,
                            ModifiedAt = new DateTime(2024, 2, 22, 15, 19, 45, 866, DateTimeKind.Utc),
                            ModifiedBy = "System"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2024, 2, 22, 15, 19, 45, 866, DateTimeKind.Utc),
                            CreatedBy = "System",
                            DisplayName = "Project ID",
                            InternalName = "projectCode",
                            IsActive = true,
                            ModifiedAt = new DateTime(2024, 2, 22, 15, 19, 45, 866, DateTimeKind.Utc),
                            ModifiedBy = "System"
                        });
                });

            modelBuilder.Entity("RMT.Projects.Domain.Entities.MasterValue", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("RecordDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("RecordInternalName")
                        .HasColumnType("text");

                    b.Property<string>("RecordType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MasterValues");
                });

            modelBuilder.Entity("RMT.Projects.Domain.Entities.Menu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("DisplayIcon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Parent")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.HasKey("Id");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("RMT.Projects.Domain.Entities.Project", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<string>("BudgetStatus")
                        .HasColumnType("text");

                    b.Property<string>("ChargableType")
                        .HasColumnType("text");

                    b.Property<string>("ClientGroup")
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<string>("ClientName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeliveryLocation")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Expertise")
                        .HasColumnType("text");

                    b.Property<string>("GtRefferenceCountry")
                        .HasColumnType("text");

                    b.Property<string>("Industry")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPublishedToMarketPlace")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsRequisitionCreationallowed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRollover")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSuspended")
                        .HasColumnType("boolean");

                    b.Property<string>("JobCode")
                        .HasColumnType("text");

                    b.Property<string>("JobLocation")
                        .HasColumnType("text");

                    b.Property<string>("JobName")
                        .HasColumnType("text");

                    b.Property<string>("JustificationToAllocate")
                        .HasColumnType("text");

                    b.Property<string>("LegalEntity")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("PipelineCode")
                        .HasColumnType("text");

                    b.Property<string>("PipelineName")
                        .HasColumnType("text");

                    b.Property<string>("PipelineStage")
                        .HasColumnType("text");

                    b.Property<string>("PipelineStatus")
                        .HasColumnType("text");

                    b.Property<string>("ProjectAllocationStatus")
                        .HasColumnType("text");

                    b.Property<int?>("ProjectFulFilledDemands")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PublishedToMarketPlaceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RevenueUnit")
                        .HasColumnType("text");

                    b.Property<int>("RolloverDays")
                        .HasColumnType("integer");

                    b.Property<string>("Sme")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Subindustry")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SuspendedModifyAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("bu")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("RMT.Projects.Domain.Entities.ProjectBudget", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("BudgetedHour")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("JobCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("PipelineCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<double>("RatePerHour")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectBudget");
                });

            modelBuilder.Entity("RMT.Projects.Domain.Entities.ProjectDemand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("NoOfResources")
                        .HasColumnType("integer");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectDemands");
                });

            modelBuilder.Entity("RMT.Projects.Domain.Entities.ProjectDemandSkills", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<long>("ProjectDemandId")
                        .HasColumnType("bigint");

                    b.Property<string>("SkillName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectDemandId");

                    b.ToTable("ProjectDemandSkills");
                });

            modelBuilder.Entity("RMT.Projects.Domain.Entities.ProjectRoles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("DelegateEmail")
                        .HasColumnType("text");

                    b.Property<string>("DelegateUserName")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectRoles");
                });

            modelBuilder.Entity("RMT.Projects.Domain.Entities.ProjectRolesView", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("ParentEmail")
                        .HasColumnType("text");

                    b.Property<string>("ParentName")
                        .HasColumnType("text");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable((string)null);

                    b.ToView("vw_projectroles", (string)null);
                });

            modelBuilder.Entity("RMT.Projects.Domain.Entities.ProjectSkills", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectSkills");
                });

            modelBuilder.Entity("RMT.Projects.Domain.Entities.PublishedFieldForMarketPlace", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("JobCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("PipelineCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PublishedFieldForMarketPlaces");
                });

            modelBuilder.Entity("RMT.Projects.Domain.Repositories.ProjectRequisitionAllocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AllocationCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JobCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PipelineCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("RequisitionCount")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("ProjectRequisitionAllocation");
                });

            modelBuilder.Entity("RMT.Projects.Domain.Entities.ProjectBudget", b =>
                {
                    b.HasOne("RMT.Projects.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("RMT.Projects.Domain.Entities.ProjectDemand", b =>
                {
                    b.HasOne("RMT.Projects.Domain.Entities.Project", "Project")
                        .WithMany("ProjectDemands")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("RMT.Projects.Domain.Entities.ProjectDemandSkills", b =>
                {
                    b.HasOne("RMT.Projects.Domain.Entities.ProjectDemand", "ProjectDemand")
                        .WithMany("ProjectDemandSkills")
                        .HasForeignKey("ProjectDemandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectDemand");
                });

            modelBuilder.Entity("RMT.Projects.Domain.Entities.ProjectRoles", b =>
                {
                    b.HasOne("RMT.Projects.Domain.Entities.Project", "Project")
                        .WithMany("ProjectRoles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("RMT.Projects.Domain.Entities.ProjectRolesView", b =>
                {
                    b.HasOne("RMT.Projects.Domain.Entities.Project", "Project")
                        .WithMany("ProjectRolesView")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("RMT.Projects.Domain.Entities.ProjectSkills", b =>
                {
                    b.HasOne("RMT.Projects.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("RMT.Projects.Domain.Repositories.ProjectRequisitionAllocation", b =>
                {
                    b.HasOne("RMT.Projects.Domain.Entities.Project", "Project")
                        .WithOne("ProjectRequisitionAllocations")
                        .HasForeignKey("RMT.Projects.Domain.Repositories.ProjectRequisitionAllocation", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("RMT.Projects.Domain.Entities.Project", b =>
                {
                    b.Navigation("ProjectDemands");

                    b.Navigation("ProjectRequisitionAllocations");

                    b.Navigation("ProjectRoles");

                    b.Navigation("ProjectRolesView");
                });

            modelBuilder.Entity("RMT.Projects.Domain.Entities.ProjectDemand", b =>
                {
                    b.Navigation("ProjectDemandSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
