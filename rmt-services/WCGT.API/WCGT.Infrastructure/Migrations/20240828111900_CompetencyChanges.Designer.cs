// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WCGT.Infrastructure.Data;

#nullable disable

namespace WCGT.Infrastructure.Migrations
{
    [DbContext(typeof(WcgtDbContext))]
    [Migration("20240828111900_CompetencyChanges")]
    partial class CompetencyChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WCGT.Domain.Entities.BUTreeMapping", b =>
                {
                    b.Property<long?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("id"));

                    b.Property<string>("bu")
                        .HasColumnType("text");

                    b.Property<string>("bu_efficiency_leader_mid")
                        .HasColumnType("text");

                    b.Property<string>("bu_id")
                        .HasColumnType("text");

                    b.Property<string>("bu_leader_mid")
                        .HasColumnType("text");

                    b.Property<DateTime?>("createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("createdby")
                        .HasColumnType("text");

                    b.Property<string>("expertise")
                        .HasColumnType("text");

                    b.Property<string>("expertise_id")
                        .HasColumnType("text");

                    b.Property<string>("expertise_leader_mid")
                        .HasColumnType("text");

                    b.Property<bool?>("isactive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("modifiedat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("modifiedby")
                        .HasColumnType("text");

                    b.Property<string>("revenue_id")
                        .HasColumnType("text");

                    b.Property<string>("ru_name")
                        .HasColumnType("text");

                    b.Property<string>("sme_group")
                        .HasColumnType("text");

                    b.Property<string>("sme_group_id")
                        .HasColumnType("text");

                    b.Property<string>("sme_group_leader_mid")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("BUTreeMappings");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.Budget", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Grade")
                        .HasColumnType("text");

                    b.Property<double>("Hour")
                        .HasColumnType("double precision");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("JobCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("PipelineCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Budget");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.Client", b =>
                {
                    b.Property<string>("client_id")
                        .HasColumnType("text");

                    b.Property<string>("client_group_code")
                        .HasColumnType("text");

                    b.Property<string>("client_group_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("createdby")
                        .HasColumnType("text");

                    b.Property<bool?>("isactive")
                        .HasColumnType("boolean");

                    b.Property<string>("job_client")
                        .HasColumnType("text");

                    b.Property<string>("legal_entity")
                        .HasColumnType("text");

                    b.Property<DateTime?>("modifiedat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("modifiedby")
                        .HasColumnType("text");

                    b.HasKey("client_id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.ClientLegalEntity", b =>
                {
                    b.Property<string>("par_aid")
                        .HasColumnType("text");

                    b.Property<DateTime?>("createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("createdby")
                        .HasColumnType("text");

                    b.Property<bool?>("isactive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("modifiedat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("modifiedby")
                        .HasColumnType("text");

                    b.Property<string>("para_desc")
                        .HasColumnType("text");

                    b.HasKey("par_aid");

                    b.ToTable("ClientLegalEntitys");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.Competency", b =>
                {
                    b.Property<string>("CompetencyId")
                        .HasColumnType("text");

                    b.Property<string>("BuId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompetencyLeaderMID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompetencyMID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompetencyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("createdby")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isactive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("modifiedat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("modifiedby")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CompetencyId");

                    b.ToTable("Competencies");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.Designation", b =>
                {
                    b.Property<string>("designation_id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("createdby")
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("designation_name")
                        .HasColumnType("text");

                    b.Property<string>("grade")
                        .HasColumnType("text");

                    b.Property<bool?>("isactive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("modifiedat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("modifiedby")
                        .HasColumnType("text");

                    b.HasKey("designation_id");

                    b.ToTable("Designations");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.DesignationGradeView", b =>
                {
                    b.Property<string>("designation_id")
                        .HasColumnType("text");

                    b.Property<double>("RatePerHour")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("createdby")
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("designation_name")
                        .HasColumnType("text");

                    b.Property<string>("grade")
                        .HasColumnType("text");

                    b.Property<bool?>("isactive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("modifiedat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("modifiedby")
                        .HasColumnType("text");

                    b.HasKey("designation_id");

                    b.ToTable((string)null);

                    b.ToView("designationgraderateview", (string)null);
                });

            modelBuilder.Entity("WCGT.Domain.Entities.Employee", b =>
                {
                    b.Property<string>("employee_mid")
                        .HasColumnType("text");

                    b.Property<string>("CompetencyId")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("birthday")
                        .HasColumnType("date");

                    b.Property<string>("business_unit_id")
                        .HasColumnType("text");

                    b.Property<string>("company_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("createdby")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("department")
                        .HasColumnType("text");

                    b.Property<string>("designation_id")
                        .HasColumnType("text");

                    b.Property<string>("email_id")
                        .HasColumnType("text");

                    b.Property<string>("employee_code")
                        .HasColumnType("text");

                    b.Property<string>("employee_status")
                        .HasColumnType("text");

                    b.Property<string>("expertise_id")
                        .HasColumnType("text");

                    b.Property<string>("first_name")
                        .HasColumnType("text");

                    b.Property<string>("group_head_mid")
                        .HasColumnType("text");

                    b.Property<bool?>("isactive")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("joining_date")
                        .HasColumnType("date");

                    b.Property<string>("last_name")
                        .HasColumnType("text");

                    b.Property<string>("location_id")
                        .HasColumnType("text");

                    b.Property<string>("middle_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("modifiedat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("modifiedby")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("proposed_lwd")
                        .HasColumnType("date");

                    b.Property<string>("reporting_partner_mid")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("resignation_date")
                        .HasColumnType("date");

                    b.Property<string>("service_line_id")
                        .HasColumnType("text");

                    b.Property<string>("sme_id")
                        .HasColumnType("text");

                    b.Property<string>("smeg_id")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("specical_day")
                        .HasColumnType("date");

                    b.Property<string>("supercoach_mid")
                        .HasColumnType("text");

                    b.HasKey("employee_mid");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.Holiday", b =>
                {
                    b.Property<long?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("id"));

                    b.Property<DateOnly?>("cr_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("createdby")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("holiday_date")
                        .HasColumnType("date");

                    b.Property<string>("holiday_name")
                        .HasColumnType("text");

                    b.Property<string>("holiday_type")
                        .HasColumnType("text");

                    b.Property<bool?>("isactive")
                        .HasColumnType("boolean");

                    b.Property<string>("location_id")
                        .HasColumnType("text");

                    b.Property<string>("location_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("modifiedat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("modifiedby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("location_id");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.Job", b =>
                {
                    b.Property<string>("job_id")
                        .HasColumnType("text");

                    b.Property<double?>("agreedJobFee")
                        .HasColumnType("double precision");

                    b.Property<string>("asst_incharge")
                        .HasColumnType("text");

                    b.Property<string>("billing_currency")
                        .HasColumnType("text");

                    b.Property<string>("bu_id")
                        .HasColumnType("text");

                    b.Property<string>("client_group_id")
                        .HasColumnType("text");

                    b.Property<bool?>("closed_job")
                        .HasColumnType("boolean");

                    b.Property<DateOnly?>("created_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("createdby")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("end_date")
                        .HasColumnType("date");

                    b.Property<string>("entity")
                        .HasColumnType("text");

                    b.Property<string>("expertise_id")
                        .HasColumnType("text");

                    b.Property<string>("industry_id")
                        .HasColumnType("text");

                    b.Property<bool?>("is_chargeable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("isactive")
                        .HasColumnType("boolean");

                    b.Property<double?>("jobBudgetValue")
                        .HasColumnType("double precision");

                    b.Property<string>("job_client")
                        .HasColumnType("text");

                    b.Property<string>("job_code")
                        .HasColumnType("text");

                    b.Property<string>("job_description")
                        .HasColumnType("text");

                    b.Property<string>("job_location_id")
                        .HasColumnType("text");

                    b.Property<string>("job_name")
                        .HasColumnType("text");

                    b.Property<string>("market")
                        .HasColumnType("text");

                    b.Property<DateTime?>("modifiedat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("modifiedby")
                        .HasColumnType("text");

                    b.Property<string>("parent_job_id")
                        .HasColumnType("text");

                    b.Property<string>("pipeline_code")
                        .HasColumnType("text");

                    b.Property<string>("pipeline_id")
                        .HasColumnType("text");

                    b.Property<string>("pipeline_status")
                        .HasColumnType("text");

                    b.Property<string>("recurring_type")
                        .HasColumnType("text");

                    b.Property<string>("remarks")
                        .HasColumnType("text");

                    b.Property<string>("revenue_id")
                        .HasColumnType("text");

                    b.Property<string>("sme_id")
                        .HasColumnType("text");

                    b.Property<string>("smeg_id")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("start_date")
                        .HasColumnType("date");

                    b.Property<string>("sub_industry_id")
                        .HasColumnType("text");

                    b.Property<string>("sub_market")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("updated_date")
                        .HasColumnType("date");

                    b.HasKey("job_id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.JobRole", b =>
                {
                    b.Property<long?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("id"));

                    b.Property<DateTime?>("createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("createdby")
                        .HasColumnType("text");

                    b.Property<bool?>("isactive")
                        .HasColumnType("boolean");

                    b.Property<string>("job_id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("modifiedat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("modifiedby")
                        .HasColumnType("text");

                    b.Property<string>("user_emailid")
                        .HasColumnType("text");

                    b.Property<string>("user_empname")
                        .HasColumnType("text");

                    b.Property<string>("user_mid")
                        .HasColumnType("text");

                    b.Property<string>("user_role")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("job_id");

                    b.ToTable("JobRoles");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.Leave", b =>
                {
                    b.Property<string>("leave_id")
                        .HasColumnType("text");

                    b.Property<double?>("applied_days")
                        .HasColumnType("double precision");

                    b.Property<string>("comp_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("createdby")
                        .HasColumnType("text");

                    b.Property<string>("emp_email")
                        .HasColumnType("text");

                    b.Property<string>("emp_mid")
                        .HasColumnType("text");

                    b.Property<string>("emp_name")
                        .HasColumnType("text");

                    b.Property<bool?>("isactive")
                        .HasColumnType("boolean");

                    b.Property<DateOnly?>("leave_end_date")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("leave_start_date")
                        .HasColumnType("date");

                    b.Property<string>("leave_status_name")
                        .HasColumnType("text");

                    b.Property<string>("leave_type_name")
                        .HasColumnType("text");

                    b.Property<string>("location_id")
                        .HasColumnType("text");

                    b.Property<string>("location_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("modifiedat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("modifiedby")
                        .HasColumnType("text");

                    b.Property<double?>("revoked_days")
                        .HasColumnType("double precision");

                    b.Property<DateOnly?>("revoked_from_date")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("revoked_to_date")
                        .HasColumnType("date");

                    b.HasKey("leave_id");

                    b.HasIndex("emp_mid");

                    b.HasIndex("location_id");

                    b.ToTable("Leaves");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.Location", b =>
                {
                    b.Property<string>("location_id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("createdby")
                        .HasColumnType("text");

                    b.Property<bool?>("isactive")
                        .HasColumnType("boolean");

                    b.Property<string>("location_mid")
                        .HasColumnType("text");

                    b.Property<string>("location_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("modifiedat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("modifiedby")
                        .HasColumnType("text");

                    b.Property<string>("region_name")
                        .HasColumnType("text");

                    b.HasKey("location_id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.Pipeline", b =>
                {
                    b.Property<string>("pipeline_id")
                        .HasColumnType("text");

                    b.Property<string>("bu_id")
                        .HasColumnType("text");

                    b.Property<string>("client_group_code")
                        .HasColumnType("text");

                    b.Property<string>("client_id")
                        .HasColumnType("text");

                    b.Property<string>("client_service_partner_id")
                        .HasColumnType("text");

                    b.Property<string>("contact_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("createdby")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("creation_date")
                        .HasColumnType("date");

                    b.Property<string>("emp_location_id")
                        .HasColumnType("text");

                    b.Property<string>("emp_location_name")
                        .HasColumnType("text");

                    b.Property<string>("emp_mid")
                        .HasColumnType("text");

                    b.Property<string>("emp_name")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("end_date")
                        .HasColumnType("date");

                    b.Property<string>("expected")
                        .HasColumnType("text");

                    b.Property<string>("expertise_id")
                        .HasColumnType("text");

                    b.Property<double?>("finalproposedfee")
                        .HasColumnType("double precision");

                    b.Property<double?>("finalproposedope")
                        .HasColumnType("double precision");

                    b.Property<string>("industry_id")
                        .HasColumnType("text");

                    b.Property<bool?>("isactive")
                        .HasColumnType("boolean");

                    b.Property<string>("job_id")
                        .HasColumnType("text");

                    b.Property<string>("location_id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("modifiedat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("modifiedby")
                        .HasColumnType("text");

                    b.Property<string>("nrccstatus")
                        .HasColumnType("text");

                    b.Property<double?>("overallbudget")
                        .HasColumnType("double precision");

                    b.Property<string>("pipeline_code")
                        .HasColumnType("text");

                    b.Property<string>("pipeline_description")
                        .HasColumnType("text");

                    b.Property<string>("pipeline_name")
                        .HasColumnType("text");

                    b.Property<string>("pipeline_status")
                        .HasColumnType("text");

                    b.Property<string>("project_code")
                        .HasColumnType("text");

                    b.Property<string>("project_name")
                        .HasColumnType("text");

                    b.Property<string>("recurring")
                        .HasColumnType("text");

                    b.Property<string>("revenue_id")
                        .HasColumnType("text");

                    b.Property<string>("service_line_id")
                        .HasColumnType("text");

                    b.Property<string>("sme_group_id")
                        .HasColumnType("text");

                    b.Property<string>("sme_id")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("start_date")
                        .HasColumnType("date");

                    b.Property<string>("sub_industry_id")
                        .HasColumnType("text");

                    b.Property<string>("win_probablity")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("won_date")
                        .HasColumnType("date");

                    b.Property<double?>("won_expected_recovery")
                        .HasColumnType("double precision");

                    b.Property<string>("won_reason")
                        .HasColumnType("text");

                    b.HasKey("pipeline_id");

                    b.ToTable("Pipelines");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.PipelineRole", b =>
                {
                    b.Property<long?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("id"));

                    b.Property<DateTime?>("createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("createdby")
                        .HasColumnType("text");

                    b.Property<bool?>("isactive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("modifiedat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("modifiedby")
                        .HasColumnType("text");

                    b.Property<string>("pipeline_id")
                        .HasColumnType("text");

                    b.Property<string>("user_emailid")
                        .HasColumnType("text");

                    b.Property<string>("user_empname")
                        .HasColumnType("text");

                    b.Property<string>("user_mid")
                        .HasColumnType("text");

                    b.Property<string>("user_role")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("pipeline_id");

                    b.ToTable("PipelineRoles");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.Project", b =>
                {
                    b.Property<long?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("id"));

                    b.Property<string>("ClientLegalEntitypar_aid")
                        .HasColumnType("text");

                    b.Property<string>("client_group_code")
                        .HasColumnType("text");

                    b.Property<string>("client_id")
                        .HasColumnType("text");

                    b.Property<string>("contact_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("createdby")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("creation_date")
                        .HasColumnType("date");

                    b.Property<string>("expected")
                        .HasColumnType("text");

                    b.Property<string>("finalproposedfee")
                        .HasColumnType("text");

                    b.Property<string>("finalproposedope")
                        .HasColumnType("text");

                    b.Property<bool?>("isactive")
                        .HasColumnType("boolean");

                    b.Property<string>("location_id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("modifiedat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("modifiedby")
                        .HasColumnType("text");

                    b.Property<string>("nrccstatus")
                        .HasColumnType("text");

                    b.Property<string>("pipeline_code")
                        .HasColumnType("text");

                    b.Property<string>("pipeline_description")
                        .HasColumnType("text");

                    b.Property<string>("pipeline_id")
                        .HasColumnType("text");

                    b.Property<string>("pipeline_name")
                        .HasColumnType("text");

                    b.Property<string>("pipeline_status")
                        .HasColumnType("text");

                    b.Property<string>("project_code")
                        .HasColumnType("text");

                    b.Property<string>("project_name")
                        .HasColumnType("text");

                    b.Property<string>("recurring")
                        .HasColumnType("text");

                    b.Property<string>("revenue_id")
                        .HasColumnType("text");

                    b.Property<string>("sector_id")
                        .HasColumnType("text");

                    b.Property<string>("service_line_id")
                        .HasColumnType("text");

                    b.Property<string>("sme_group_id")
                        .HasColumnType("text");

                    b.Property<string>("sme_id")
                        .HasColumnType("text");

                    b.Property<string>("win_probablity")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("won_date")
                        .HasColumnType("date");

                    b.Property<string>("won_expected_recovery")
                        .HasColumnType("text");

                    b.Property<string>("won_reason")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("ClientLegalEntitypar_aid");

                    b.HasIndex("client_id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.ProjectJobCode", b =>
                {
                    b.Property<long?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("id"));

                    b.Property<DateTime?>("createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("createdby")
                        .HasColumnType("text");

                    b.Property<bool?>("isactive")
                        .HasColumnType("boolean");

                    b.Property<string>("job_client")
                        .HasColumnType("text");

                    b.Property<string>("job_code")
                        .HasColumnType("text");

                    b.Property<string>("job_description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("job_id")
                        .HasColumnType("text");

                    b.Property<string>("job_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("modifiedat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("modifiedby")
                        .HasColumnType("text");

                    b.Property<string>("pipeline_code")
                        .HasColumnType("text");

                    b.Property<long?>("project_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("project_id");

                    b.ToTable("ProjectJobCodes");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.ProjectRole", b =>
                {
                    b.Property<long?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("id"));

                    b.Property<DateTime?>("createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("createdby")
                        .HasColumnType("text");

                    b.Property<bool?>("isactive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("modifiedat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("modifiedby")
                        .HasColumnType("text");

                    b.Property<long?>("project_id")
                        .HasColumnType("bigint");

                    b.Property<string>("user_email")
                        .HasColumnType("text");

                    b.Property<string>("user_role")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("project_id");

                    b.ToTable("ProjectRoles");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.RateDesignationMaster", b =>
                {
                    b.Property<long?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("id"));

                    b.Property<string>("Expertise_id")
                        .HasColumnType("text");

                    b.Property<double>("RatePerHour")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("createdby")
                        .HasColumnType("text");

                    b.Property<string>("grade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("isactive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("modifiedat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("modifiedby")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("RateDesignationMaster");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.SectorIndustry", b =>
                {
                    b.Property<long?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("id"));

                    b.Property<DateTime?>("createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("createdby")
                        .HasColumnType("text");

                    b.Property<string>("industry_id")
                        .HasColumnType("text");

                    b.Property<string>("industry_name")
                        .HasColumnType("text");

                    b.Property<bool?>("isactive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("modifiedat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("modifiedby")
                        .HasColumnType("text");

                    b.Property<string>("sub_industry_id")
                        .HasColumnType("text");

                    b.Property<string>("sub_industry_name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("SectorIndustrys");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.ServiceLine", b =>
                {
                    b.Property<long?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("id"));

                    b.Property<DateTime?>("createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("createdby")
                        .HasColumnType("text");

                    b.Property<bool?>("isactive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("modifiedat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("modifiedby")
                        .HasColumnType("text");

                    b.Property<string>("service_line")
                        .HasColumnType("text");

                    b.Property<string>("service_line_id")
                        .HasColumnType("text");

                    b.Property<string>("sme")
                        .HasColumnType("text");

                    b.Property<string>("sme_group")
                        .HasColumnType("text");

                    b.Property<string>("sme_group_id")
                        .HasColumnType("text");

                    b.Property<string>("sme_id")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("ServiceLines");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.WCGTDataLog", b =>
                {
                    b.Property<long?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("id"));

                    b.Property<DateTime?>("createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("createdby")
                        .HasColumnType("text");

                    b.Property<string>("entity_type")
                        .HasColumnType("text");

                    b.Property<string>("error_message")
                        .HasColumnType("text");

                    b.Property<string>("error_stacktrace")
                        .HasColumnType("text");

                    b.Property<string>("input_json")
                        .HasColumnType("text");

                    b.Property<DateTime?>("modifiedat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("modifiedby")
                        .HasColumnType("text");

                    b.Property<string>("status")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("WCGTDataLogs");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.WCGTTimesheet", b =>
                {
                    b.Property<long?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("id"));

                    b.Property<string>("chargeableflag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("client")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("createdby")
                        .HasColumnType("text");

                    b.Property<DateOnly>("datelog")
                        .HasColumnType("date");

                    b.Property<string>("designation_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("employeecode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("employeename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("gradename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("jobcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("modifiedat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("modifiedby")
                        .HasColumnType("text");

                    b.Property<double>("rate")
                        .HasColumnType("double precision");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("totaltime")
                        .HasColumnType("double precision");

                    b.HasKey("id");

                    b.ToTable("Timesheet");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.WcgtResoureTimesheetGroup", b =>
                {
                    b.Property<string>("empcode")
                        .HasColumnType("text");

                    b.Property<string>("empname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("timesheetcost")
                        .HasColumnType("double precision");

                    b.Property<double>("totaltime")
                        .HasColumnType("double precision");

                    b.HasKey("empcode");

                    b.ToTable("sp_resource_timesheet_view");

                    b.ToFunction("sp_resource_timesheet_view");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.WcgtTimesheetGroup", b =>
                {
                    b.Property<string>("designation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("monthname")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("timesheetcost")
                        .HasColumnType("double precision");

                    b.Property<double>("totaltime")
                        .HasColumnType("double precision");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);

                    b.ToFunction("sp_timesheet_view");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.WorkingDays", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("day_number")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("working_date")
                        .HasColumnType("date");

                    b.HasKey("id");

                    b.HasIndex("working_date")
                        .IsUnique();

                    b.ToTable("working_days");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.Holiday", b =>
                {
                    b.HasOne("WCGT.Domain.Entities.Location", "location")
                        .WithMany()
                        .HasForeignKey("location_id");

                    b.Navigation("location");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.JobRole", b =>
                {
                    b.HasOne("WCGT.Domain.Entities.Job", "job")
                        .WithMany("job_roles")
                        .HasForeignKey("job_id");

                    b.Navigation("job");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.Leave", b =>
                {
                    b.HasOne("WCGT.Domain.Entities.Employee", "employee")
                        .WithMany()
                        .HasForeignKey("emp_mid");

                    b.HasOne("WCGT.Domain.Entities.Location", "location")
                        .WithMany()
                        .HasForeignKey("location_id");

                    b.Navigation("employee");

                    b.Navigation("location");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.PipelineRole", b =>
                {
                    b.HasOne("WCGT.Domain.Entities.Pipeline", "pipeline")
                        .WithMany("pipeline_roles")
                        .HasForeignKey("pipeline_id");

                    b.Navigation("pipeline");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.Project", b =>
                {
                    b.HasOne("WCGT.Domain.Entities.ClientLegalEntity", null)
                        .WithMany("projects")
                        .HasForeignKey("ClientLegalEntitypar_aid");

                    b.HasOne("WCGT.Domain.Entities.Client", "client")
                        .WithMany("projects")
                        .HasForeignKey("client_id");

                    b.Navigation("client");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.ProjectJobCode", b =>
                {
                    b.HasOne("WCGT.Domain.Entities.Project", "project")
                        .WithMany("project_jobcodes")
                        .HasForeignKey("project_id");

                    b.Navigation("project");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.ProjectRole", b =>
                {
                    b.HasOne("WCGT.Domain.Entities.Project", "project")
                        .WithMany("project_roles")
                        .HasForeignKey("project_id");

                    b.Navigation("project");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.Client", b =>
                {
                    b.Navigation("projects");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.ClientLegalEntity", b =>
                {
                    b.Navigation("projects");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.Job", b =>
                {
                    b.Navigation("job_roles");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.Pipeline", b =>
                {
                    b.Navigation("pipeline_roles");
                });

            modelBuilder.Entity("WCGT.Domain.Entities.Project", b =>
                {
                    b.Navigation("project_jobcodes");

                    b.Navigation("project_roles");
                });
#pragma warning restore 612, 618
        }
    }
}
